package net.madicorp.autodoc.models;

// Generated 15 oct. 2014 10:48:29 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "User", catalog = "autodocdb")
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 641513344521864586L;
	private int idUser;
	private Role role;
	private String login;
	private String password;
	private String nomUser;
	private String prenomUser;
	private DropboxCpt dropboxCpt;
	private GoogleDriveCpt googleDriveCpt;
	private Set<Categorie> categories = new HashSet<Categorie>(0);
	private Set<Document> documents = new HashSet<Document>(0);
	private Set<User_Document> user_Documents = new HashSet<User_Document>(0);


	public User() {
	}

	public User(int idUser, Role role) {
		this.idUser = idUser;
		this.role = role;
	}
	
	

	public User(Role role, String login, String password, String nomUser,
			String prenomUser) {
		super();
		this.role = role;
		this.login = login;
		this.password = password;
		this.nomUser = nomUser;
		this.prenomUser = prenomUser;
	}

	public User(int idUser, Role role, String login, String password,
			String nomUser, String prenomUser, Set<Document> documents) {
		this.idUser = idUser;
		this.role = role;
		this.login = login;
		this.password = password;
		this.nomUser = nomUser;
		this.prenomUser = prenomUser;
		this.documents = documents;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idUser", unique = true, nullable = false)
	public int getIdUser() {
		return this.idUser;
	}

	public void setIdUser(int idUser) {
		this.idUser = idUser;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "Role_idRole", nullable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "login",unique = true ,length = 45)
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	@Column(name = "password", length = 65535)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "nomUser", length = 45)
	public String getNomUser() {
		return this.nomUser;
	}

	public void setNomUser(String nomUser) {
		this.nomUser = nomUser;
	}

	@Column(name = "prenomUser", length = 45)
	public String getPrenomUser() {
		return this.prenomUser;
	}

	public void setPrenomUser(String prenomUser) {
		this.prenomUser = prenomUser;
	}
	
	
	@OneToOne(fetch = FetchType.EAGER, mappedBy = "user")
	public DropboxCpt getDropboxCpt() {
		return dropboxCpt;
	}

	public void setDropboxCpt(DropboxCpt dropboxCpt) {
		this.dropboxCpt = dropboxCpt;
	}
	
	
	
	@OneToOne(fetch = FetchType.EAGER, mappedBy = "user")
	public GoogleDriveCpt getGoogleDriveCpt() {
		return googleDriveCpt;
	}

	public void setGoogleDriveCpt(GoogleDriveCpt googleDriveCpt) {
		this.googleDriveCpt = googleDriveCpt;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Categorie> getCategories() {
		return categories;
	}

	public void setCategories(Set<Categorie> categories) {
		this.categories = categories;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "User_Document", catalog = "autodocdb", joinColumns = { @JoinColumn(name = "User_idUser", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "Document_idDocument", nullable = false, updatable = false) })
	public Set<Document> getDocuments() {
		return this.documents;
	}

	public void setDocuments(Set<Document> documents) {
		this.documents = documents;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<User_Document> getUser_Documents() {
		return user_Documents;
	}

	public void setUser_Documents(Set<User_Document> user_Documents) {
		this.user_Documents = user_Documents;
	}

	
	

}
